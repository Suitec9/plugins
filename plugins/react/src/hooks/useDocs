import { useState } from 'react';
import { setDoc, setManyDocs } from '@junobuild/core';
import { nanoid } from "nanoid";

interface Doc {
  id: string;
  [key: string]: any;
}

const myId = nanoid();

export default function useCollection(collectionName: string) {
  const [docs, setDocs] = useState<Doc[]>([]);

  const addDoc = (doc: Doc) => {
    setDocs(prevDocs => [...prevDocs, doc]);
    setDoc({
      collection: collectionName,
      doc: {
        key : "myDoc",
        data: {} ,
      },
    });
  }

  const updateDoc = (id: string, updates: object) => {
    setDocs(prevDocs => {
      return prevDocs.map(doc => {
        if (doc.id === myId) {
          return {...doc, ...updates};
        }
        return doc;
      });
    });
    
    setDoc({
      collection: collectionName, 
      doc: {
        key: id,
        data: {},
        ...updates
      }
    });
  }

  return {
    docs,
    addDoc,
    updateDoc
    // other CRUD methods
  }
}